@top JsonText { value }

value { True | False | Null | Number | String | Object | Array | handlebarsExpression }

String { string }
Object { "{" list<Property>? "}" }
Array  { "[" list<value>? "]" }

Property { PropertyName ":" value }
PropertyName { string }

handlebarsExpression { Expression | BlockExpression | PartialBlockExpression | InlinePartialExpression | EscapedExpression }

HashValue { value | Context | SubExpression }
HashArgument { HashArgumentProperty "=" HashValue }
ExpressionContent { HelperOrContext (Context | SubExpression | HashArgument*)? }

blockExpressionEnd { HTMLEscapedExpressionClose value* BlockExpressionEnd HelperOrContext HTMLEscapedExpressionClose }

SubExpression { SubExpressionOpen ExpressionContent SubExpressionClose }

Expression { OpeningExpression (ExpressionContent | SubExpression) ClosingExpression }
BlockExpression { BlockExpressionOpen ExpressionContent BlockParameters? blockExpressionEnd }
PartialBlockExpression { PartialBlockExpressionOpen (ExpressionContent | SubExpression) blockExpressionEnd }
InlinePartialExpression { InlinePartialExpressionOpen HelperOrContext string  blockExpressionEnd }
EscapedExpression { "\\" Expression }

@skip {} {
  Comment { "{{!" (CommentContent | commentNewLine)* commentEnd }
}

@local tokens {
  commentEnd { HTMLEscapedExpressionClose }
  commentNewLine { "\n" }
  @else CommentContent
}

@skip {} {
  BlockParameters { "as" space+ pipe space* BlockParameterName (space+ BlockParameterName)* space* pipe }
}

@local tokens {
  pipe { "|" }
  space { whitespace }
  @else BlockParameterName
}

@tokens {
  OpeningExpression { HTMLEscapedExpressionOpen | RawExpressionOpen | RawBlockExpressionOpen | PartialExpressionOpen }
  ClosingExpression { HTMLEscapedExpressionClose | RawExpressionClose | RawBlockExpressionClose }

  HTMLEscapedExpressionOpen[closedBy=HTMLEscapedExpressionClose] { "{{" "~"? }
  RawExpressionOpen[closedBy=RawBlockExpressionClose] { "{{{" }
  RawBlockExpressionOpen[closedBy=RawBlockExpressionClose] { "{{{{" }
  PartialExpressionOpen[closedBy=HTMLEscapedExpressionClose] { HTMLEscapedExpressionOpen ">" }
  BlockExpressionOpen[closedBy=HTMLEscapedExpressionClose] { HTMLEscapedExpressionOpen "#" }
  BlockExpressionEnd[closedBy=HTMLEscapedExpressionClose] { HTMLEscapedExpressionOpen "/" }
  PartialBlockExpressionOpen[closedBy=HTMLEscapedExpressionClose] { BlockExpressionOpen ">" }
  InlinePartialExpressionOpen[closedBy=HTMLEscapedExpressionClose] { BlockExpressionOpen "*" }

  HTMLEscapedExpressionClose[openedBy=HTMLEscapedExpressionOpen] { "~"? "}}" ","? }
  RawExpressionClose[openedBy=RawExpressionOpen] { "}}}" ","? }
  RawBlockExpressionClose[openedBy=RawBlockExpressionOpen] { "}}}}" }

  SubExpressionOpen { "(" }
  SubExpressionClose { ")" }

  True  { "true" }
  False { "false" }
  Null  { "null" }

  Number { '-'? int frac? exp?  }
  int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }
  exp  { $[eE] $[+\-]? @digit+ }

  string { '"' char* '"' }
  char { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  esc  { $["\\\/bfnrt] | "u" hex hex hex hex }
  hex  { $[0-9a-fA-F] }

  whitespace[@export] { $[ \n\r\t] }

  "{" "}" "[" "]"

  "="
  "as"
}

@skip { whitespace | Comment }
list<item> { item ("," item)* }

@context trackShiftTerm from "./tokens"

@external tokens expressionToken from "./tokens" { Context, HelperOrContext, HashArgumentProperty }

@detectDelim