@top Document { (entity | DoctypeDecl)+ }

entity {
  EntityReference |
  CharacterReference |
  Cdata |
  Element |
  Comment |
  ProcessingInst |
  MismatchedCloseTag |
  incompleteStartCloseTag |
  space |
  value
}


Element {
  OpenTag entity* (CloseTag | MissingCloseTag) |
  SelfClosingTag
}

OpenTag[closedBy="CloseTag MissingCloseTag"] {
  StartTag space* TagName space* (Attribute space*)* EndTag
}

SelfClosingTag {
  StartTag space* TagName space* (Attribute space*)* SelfCloseEndTag
}

CloseTag[openedBy=OpenTag] {
  StartCloseTag space* TagName space* EndTag
}

MismatchedCloseTag {
  mismatchedStartCloseTag space* TagName space* EndTag
}

Attribute {
  AttributeName space* Is space* AttributeValue
}

AttributeValue { '"' (attributeContent | EntityReference | CharacterReference)* '"' }

Comment { "<!--" commentContent* "-->" }

ProcessingInst { "<?" piContent* "?>" }

Cdata { cdataStart cdataContent* "]]>" }

@skip {space} {
  handlebarsExpression { Expression | BlockExpression | PartialBlockExpression | InlinePartialExpression | EscapedExpression }
  value { True | False | Null | Number | String | handlebarsExpression }
  HashValue { value | Context | SubExpression }
  HashArgument { HashArgumentProperty Is HashValue }
  SubExpression { SubExpressionOpen ExpressionContent SubExpressionClose }
  ExpressionContent { HelperOrContext (Context | SubExpression)? HashArgument* }
  Expression { OpeningExpression (ExpressionContent | SubExpression) ClosingExpression }
  BlockExpression { BlockExpressionOpen ExpressionContent BlockParameters? blockExpressionEnd }
  PartialBlockExpression { PartialBlockExpressionOpen (ExpressionContent | SubExpression) blockExpressionEnd }
  InlinePartialExpression { InlinePartialExpressionOpen HelperOrContext String blockExpressionEnd }
  blockExpressionEnd { HTMLEscapedExpressionClose value* BlockExpressionEnd HelperOrContext HTMLEscapedExpressionClose }
  EscapedExpression { "\\" Expression }
}

@skip {} {
  TemplateComment { "{{!" (TemplateCommentContent | commentNewLine)* commentEnd }
}
@skip {} {
  String {
    doubleQuote (stringContentDouble | Escape)* (doubleQuote | "\n") |
    singleQuote (stringContentSingle | Escape)* (singleQuote | "\n")
  }
}
@skip { TemplateComment }

@local tokens {
  commentEnd { HTMLEscapedExpressionClose }
  commentNewLine { "\n" }
  @else TemplateCommentContent
}

@skip {} {
  BlockParameters { "as" whitespace+ pipe whitespace* BlockParameterName (whitespace+ BlockParameterName)* whitespace* pipe }
}

@local tokens {
  pipe { "|" }
  whitespace { @whitespace }
  @else BlockParameterName
}

@context elementContext from "./tokens"

@external tokens startTag from "./tokens" {
  StartTag[closedBy="SelfCloseEndTag EndTag"]
  StartCloseTag
  MissingCloseTag
  mismatchedStartCloseTag[@name=StartCloseTag]
  incompleteStartCloseTag[@name=StartCloseTag]
}

@external tokens commentContent from "./tokens" { commentContent }
@external tokens piContent from "./tokens" { piContent }
@external tokens cdataContent from "./tokens" { cdataContent }

@tokens {
  OpeningExpression { HTMLEscapedExpressionOpen | RawExpressionOpen | RawBlockExpressionOpen | PartialExpressionOpen }
  ClosingExpression { HTMLEscapedExpressionClose | RawExpressionClose | RawBlockExpressionClose }

  HTMLEscapedExpressionOpen[closedBy=HTMLEscapedExpressionClose] { "{{" "~"? }
  RawExpressionOpen[closedBy=RawBlockExpressionClose] { "{{{" }
  RawBlockExpressionOpen[closedBy=RawBlockExpressionClose] { "{{{{" }
  PartialExpressionOpen[closedBy=HTMLEscapedExpressionClose] { HTMLEscapedExpressionOpen ">" }
  BlockExpressionOpen[closedBy=HTMLEscapedExpressionClose] { HTMLEscapedExpressionOpen "#" }
  BlockExpressionEnd[closedBy=HTMLEscapedExpressionClose] { HTMLEscapedExpressionOpen "/" }
  PartialBlockExpressionOpen[closedBy=HTMLEscapedExpressionClose] { BlockExpressionOpen ">" }
  InlinePartialExpressionOpen[closedBy=HTMLEscapedExpressionClose] { BlockExpressionOpen "*" }

  HTMLEscapedExpressionClose[openedBy=HTMLEscapedExpressionOpen] { "~"? "}}" ","? }
  RawExpressionClose[openedBy=RawExpressionOpen] { "}}}" ","? }
  RawBlockExpressionClose[openedBy=RawBlockExpressionOpen] { "}}}}" }

  SubExpressionOpen { "(" }
  SubExpressionClose { ")" }

  EndTag[openedBy="StartTag StartCloseTag"] { ">" }

  SelfCloseEndTag[openedBy=StartTag] { "/>" }

  nameStart {
    ":" | @asciiLetter | "_" |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
  }

  nameChar {
    nameStart | "-" | "." | @digit | $[\u00B7\u0300-\u036F\u203F-\u2040]
  }

  identifier { nameStart nameChar* }

  TagName { identifier }

  AttributeName { identifier }

  attributeContent { !["&{]+ }

  Is { "=" }

  EntityReference { "&" ![#; ]+ ";" }

  CharacterReference { "&#" ![; ]+ ";" }

  DoctypeDecl { "<!" ("doctype" | "DOCTYPE") ![>]* ">" }

  cdataStart { "<![" ("cdata" | "CDATA") "[" }

  space { (" " | "\t" | "\r" | "\n")+ }

  True  { "true" }
  False { "false" }
  Null  { "null" }

  singleQuote[@name=Quote] { "'" }
  doubleQuote[@name=Quote] { '"' }

  stringContentSingle { ![\\\n']+ }
  stringContentDouble { ![\\\n"]+ }

  Number { '-'? int frac? exp?  }
  int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }
  exp  { $[eE] $[+\-]? @digit+ }

  hex  { $[0-9a-fA-F] }
  Escape {
    "\\" ("x" hex hex | "u" ("{" hex+ "}" | hex hex hex hex) | ![xu])
  }


  "as"
}

@external tokens expressionTokens from "./tokens" {
  Context
  HelperOrContext
  HashArgumentProperty
}

@detectDelim